function ls0() {
    Return(BinOp(t2, Mul, Load(t1), Load(t1)))
    Drop(0)
}
function ls2() {
    BinOp(t6, LT, Load(t5), Store(t8, Const(1, Signed, Bit32)))
    JumpOp(LT, Int(1))
    Return(UnOp(t9, Minus, Store(t9, Const(1, Signed, Bit32))))
    Drop(0)
    Label(Int(1))
    BinOp(t10, EQ, Load(t5), Store(t12, Const(0, Signed, Bit32)))
    JumpOp(EQ, Int(2))
    Return(Store(t13, Const(0, Signed, Bit32)))
    Drop(0)
    Label(Int(2))
    BinOp(t15, Minus, Load(t5), Store(t17, Const(1, Signed, Bit32)))
    Push(RAX)
    Pop(RDI)
    BinOp(t18, Minus, Load(t5), Store(t20, Const(2, Signed, Bit32)))
    Push(RAX)
    Pop(RDI)
    Return(BinOp(t14, Plus, Call(Named(Symbol(2))), Call(Named(Symbol(2)))))
    Drop(0)
}
function ls4() {
    BinOp(t21, LTE, Store(t22, Const(20, Signed, Bit32)), Store(t23, Const(20, Signed, Bit32)))
    JumpOp(LTE, Int(4))
    Store(t24, Name(Int(6)))
    Push(RAX)
    Pop(RDI)
    Call(Named(Symbol(5)))
    Drop(0)
    Jump(Int(5))
    Label(Int(4))
    Store(t25, Name(Int(7)))
    Push(RAX)
    Pop(RDI)
    Call(Named(Symbol(5)))
    Drop(0)
    Label(Int(5))
    Store(t26, Const(10, Signed, Bit32))
    Push(RAX)
    Pop(RDI)
    Call(Named(Symbol(2)))
    Push(RAX)
    Pop(RSI)
    Store(t26, Name(Int(8)))
    Push(RAX)
    Pop(RDI)
    Call(Named(Symbol(6)))
    Drop(0)
}
